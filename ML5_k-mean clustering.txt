import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
data = pd.read_csv("sales_data_sample.csv", encoding='Latin-1')
data.head()
.data.shapedata = pd.read_csv("sales_data_sample.csv", encoding='Latin-1')
print(data.head())
print(data.shape)
print(data.isnull().sum())
.# Number of NAN values per column in the dataset
data.isnull().sum()
.# Assuming 'data' is a pandas DataFrame, and you're trying to drop the listed columns
data = data.drop(["ORDERNUMBER", "PRICEEACH", "ORDERDATE", "PHONE", 
                  "ADDRESSLINE1", "ADDRESSLINE2", "CITY", "STATE", 
                  "TERRITORY", "POSTALCODE", "COUNTRY"], axis=1)
# Display the first few rows of the modified dataframe
data.head()
.data.isnull().sum()
.data.describe()
.sns.countplot(data = data , x = 'STATUS')
.import seaborn as sns
sns.histplot(x = 'SALES' , hue = 'PRODUCTLINE', data = data,
element="poly")
.#Here we can see all the catagory lies in the range of price and hence in this we be creating a cluster on targeting the same
data['PRODUCTLINE'].unique()
.#checking the duplicated values
data.drop_duplicates(inplace=True)
.data.info()
.list_cat = data.select_dtypes(include=['object']).columns.tolist()
list_cat
.for i in list_cat:
    sns.countplot(data = data ,x = i)
    plt.xticks(rotation = 90)
    plt.show()
.#dealing with the catagorical features
from sklearn import preprocessing
le = preprocessing.LabelEncoder()
# Encode labels in column 'species'.
for i in list_cat:
    data[i]= le.fit_transform(data[i])
.data.info()
.data['SALES'] = data['SALES'].astype(int)
data.info()
.data.describe()
.## taget feature are Sales and productline
X = data[['SALES','PRODUCTCODE']]
.data.columns
.from yellowbrick.cluster import KElbowVisualizer
model = KMeans()
visualizer = KElbowVisualizer(model, k=(1,12)).fit(X)
visualizer.show()
.from sklearn.cluster import KMeans
kmeans = KMeans(n_clusters=4, init='k-means++', random_state=0).fit(X)
kmeans.labels_
.kmeans.inertia_
.kmeans.n_iter_
.kmeans.cluster_centers_
.#getting the size of the clusters
from collections import Counter
Counter(kmeans.labels_)
.#Hence the NUmber of Clusters to be choosen Will be 4 according to the elbow method
sns.scatterplot(data=X, x="SALES", y="PRODUCTCODE", hue=kmeans.labels_)
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1],
marker="X", c="r", s=80, label="centroids")
plt.legend()
plt.show()