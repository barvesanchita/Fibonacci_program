import pandas as pd

# Load dataset
df = pd.read_csv('ham-spam.csv')
df = df.drop_duplicates() 
.df.info()
.#Check for duplicate rows in the dataset.
.from sklearn.feature_extraction.text import CountVectorizer

# Initialize CountVectorizer with bigrams and English stop words
vectorizer = CountVectorizer(ngram_range=(1, 2), stop_words='english')
X = vectorizer.fit_transform(df['Text'])  # Transform the text data
y = df['IsSpam']  # Target variable
.from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)
.from sklearn.naive_bayes import MultinomialNB
# Initialize and train the model
model = MultinomialNB()
model.fit(X_train, y_train)
.%matplotlib inline
from sklearn.metrics import ConfusionMatrixDisplay
# Display the confusion matrix
ConfusionMatrixDisplay.from_estimator(
    model,
    X_test,
    y_test,
    display_labels=['Not Spam', 'Spam'],
    cmap='Blues',
    xticks_rotation='vertical'
)
.from sklearn.metrics import accuracy_score, roc_auc_score
# Model accuracy on the test set
accuracy = model.score(X_test, y_test)
print("Accuracy:", accuracy)
# ROC AUC score
probabilities = model.predict_proba(X_test)
roc_auc = roc_auc_score(y_test, probabilities[:, 1])
print("ROC AUC Score:", roc_auc)
.# Example messages
messages = ['Can you attend a code review on Tuesday?', 
            'Why pay more for expensive meds when you can order them online and save $$$?']
# Transform and predict
for message in messages:
    message_transformed = vectorizer.transform([message])
    prediction = model.predict(message_transformed)[0]
    prediction_proba = model.predict_proba(message_transformed)[0]

    print(f"Message: {message}")
    print(f"Prediction: {'Spam' if prediction == 1 else 'Not Spam'}")
    print(f"Probability of Spam: {prediction_proba[1]:.4f}\n")